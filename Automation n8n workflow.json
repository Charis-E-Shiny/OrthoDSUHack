{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "patient-query",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -144,
        48
      ],
      "id": "3a922797-751e-4e36-b5fd-81ee78b7bad6",
      "name": "Webhook",
      "webhookId": "376d970f-c7dd-4495-b201-f80338650993"
    },
    {
      "parameters": {
        "jsCode": "// Get the data from the incoming webhook body\nconst body = $json.body || {};\nconst arduinoData = body.arduino_data || {};\n\n// Extract values safely\nconst timestamp = body.timestamp || \"\";\nconst kneeAngle = parseFloat(arduinoData.knee_angle || \"0\");\nconst roll = parseFloat(arduinoData.roll || \"0\");\nconst pitch = parseFloat(arduinoData.pitch || \"0\");\nconst yaw = parseFloat(arduinoData.yaw || \"0\");\nconst recordingStatus = arduinoData.recording_status || \"unknown\";\nconst source = body.source || \"unknown\";\n\n// Create a structured output to pass to the next node\nreturn [{\n  json: {\n    timestamp,\n    kneeAngle,\n    roll,\n    pitch,\n    yaw,\n    recordingStatus,\n    source\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        96
      ],
      "id": "e2a665da-b919-4665-bf77-ee7cfdf95030",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "{\n  \"role\": \"system\",\n  \"content\": \"You are an AI physical therapy assistant named 'OrthoConnect', specializing in knee rehabilitation after injuries or surgery. Your role is to analyze patient data and provide personalized, safe, and effective exercise or posture recommendations. You must be supportive, encouraging, and professional in your responses.\\n\\nUse the patient’s mobility score, pain level, recovery stage, and sensor data like knee angle, roll, pitch, and yaw to determine their current condition. Provide practical advice that improves their rehabilitation outcomes while prioritizing safety.\\n\\nIf pain is too high, recommend rest and consulting a healthcare provider instead of exercises.\\n\\nDo not include any YouTube video links or related fields in your response. Only provide text-based recommendations.\"\n}\n",
              "role": "system"
            },
            {
              "content": "={\n  \"role\": \"user\",\n  \"content\": \"Here is the patient’s data:\\n\\n- Mobility Score: 89 out of 100 (Higher is better)\\n- Pain Level: 5 out of 10 (Lower is better)\\n- Recovery Stage: advanced\\n- Knee Angle: 160.006 degrees\\n- Roll: 8.19\\n- Pitch: 0.33\\n- Yaw: -0.64\\n- Recording Status: YES\\n- Source: arduino_knee_monitor\\n\\nBased on this data, please provide:\\n\\n1. A recommended exercise or posture adjustment that is appropriate and safe for the patient’s condition.\\n2. An explanation of why this recommendation is suitable.\\n3. General advice or tips for improving knee health and posture.\\n4. Ensure that if the pain level is high (7 or above), you recommend rest and consulting a healthcare professional instead of exercises.\\n\\nPlease respond in a structured JSON format using these keys:\\n\\n{\\n  \\\"feedback\\\": \\\"(A brief supportive message to the patient.)\\\",\\n  \\\"recommendedExercise\\\": \\\"(A specific exercise or posture tip.)\\\",\\n  \\\"rationale\\\": \\\"(One sentence explaining why this recommendation is suitable.)\\\",\\n  \\\"additionalAdvice\\\": \\\"(Extra tips on posture or care.)\\\",\\n  \\\"confidence\\\": (A number between 0.5 and 1.0 representing your confidence in the recommendation.)\\n}\"\n}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        432,
        -32
      ],
      "id": "0b20cdc1-51f9-4cb3-a9a0-ecf517d49514",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "6OvLaWdk4mkACK7l",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst output = [];\n\nfor (const item of items) {\n  // ✅ Adjusted path to match actual data structure\n  const content = item.json?.message?.content || null;\n\n  if (!content) {\n    output.push({\n      json: {\n        error: \"No message returned from AI\",\n        rawData: item.json\n      }\n    });\n    continue;\n  }\n\n  // Remove code block formatting if present\n  let cleanContent = content.trim();\n  if (cleanContent.startsWith(\"```json\")) {\n    cleanContent = cleanContent.replace(/^```json/, \"\").replace(/```$/, \"\").trim();\n  }\n\n  try {\n    const parsed = JSON.parse(cleanContent);\n\n    // ✅ Directly push the parsed object since it's already structured\n    output.push({\n      json: parsed\n    });\n\n  } catch (e) {\n    output.push({\n      json: {\n        error: \"Could not parse JSON\",\n        rawContent: cleanContent\n      }\n    });\n  }\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        -32
      ],
      "id": "d01eb991-b8d0-44b8-a13d-fa30ca121b46",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        944,
        160
      ],
      "id": "8ff630ae-d2ce-4f31-918c-987e99c7d8f7",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst exercises = items.map(item => item.json);\n\n// Return as the response to the webhook\nreturn [{\n  json: {\n    status: \"success\",\n    recommendations: exercises\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        160
      ],
      "id": "718a55fc-83c2-4117-86b9-995952fb1827",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "jsCode": "// Extract values from the previous node\nconst timestamp = $json.timestamp || \"\";\nconst kneeAngle = $json.kneeAngle || 0;\nconst roll = $json.roll || 0;\nconst pitch = $json.pitch || 0;\nconst yaw = $json.yaw || 0;\nconst recordingStatus = $json.recordingStatus || \"unknown\";\nconst source = $json.source || \"unknown\";\n\n// Here you can also decide how to map or normalize these values if needed\n// For example, you might want to infer mobilityScore and painLevel from kneeAngle, etc.\n// For demonstration, we'll use some placeholder logic:\n\n// Example mappings (you can refine this later)\nconst mobilityScore = Math.round((kneeAngle / 180) * 100); // converting angle to score out of 100\nconst painLevel = roll > 10 ? 8 : roll > 5 ? 5 : 3; // dummy logic based on roll\nconst recoveryStage = kneeAngle < 100 ? \"initial\" : kneeAngle < 140 ? \"intermediate\" : \"advanced\";\n\n// Build the prompt as required by the AI model\nconst prompt = `\nROLE: You are an AI physical therapy assistant named \"OrthoCare AI\", specializing in knee rehabilitation after injuries or surgery.\n\nPATIENT DATA:\n- Mobility Score: ${mobilityScore} out of 100 (Higher is better)\n- Patient-Reported Pain Level: ${painLevel} out of 10 (Lower is better)\n- Recovery Stage: ${recoveryStage} (e.g., 'initial', 'intermediate', 'advanced')\n\nTASK:\nAnalyze the patient's data above and provide a personalized exercise recommendation that is safe and effective for their current condition.\n\nCRITICAL INSTRUCTIONS:\n1. **Safety First:** If pain level is reported as 7 or higher, do not recommend a new exercise. Instead, recommend rest and consulting their physical therapist.\n2. **Exercise Type:** For recovery stages 'initial' or pain levels above 4, recommend only passive range-of-motion or very gentle strengthening exercises (e.g., heel slides, quad sets, straight leg raises). Avoid recommending weighted or high-impact exercises.\n3. **Tone:** Be supportive, encouraging, and professional.\n4. **OUTPUT FORMAT:** You MUST respond in a valid JSON format only, using the following exact keys:\n\n{\n  \"feedback\": \"(Your overall assessment and message for the patient. 1-2 sentences.)\",\n  \"recommendedExercise\": \"(The name of a single, specific knee rehabilitation exercise. If pain is too high, put 'Consult Therapist'.)\",\n  \"rationale\": \"(A brief, one-sentence explanation for your recommendation.)\",\n  \"confidence\": (A number between 0.5 and 1.0 representing your confidence in this recommendation.)\n}\n`;\n\n// Return this prompt and other useful information\nreturn [{\n  json: {\n    timestamp,\n    kneeAngle,\n    roll,\n    pitch,\n    yaw,\n    recordingStatus,\n    source,\n    mobilityScore,\n    painLevel,\n    recoveryStage,\n    prompt\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        160
      ],
      "id": "311e52db-910e-4746-bd53-bbe86e078a5c",
      "name": "Code in JavaScript3"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        []
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "ca804ab9-5ca1-4f20-abf7-f891f0241e0d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6d3ce1835304e0447e3b76ae2d0e0495099c90e9f37b9d2ade5d0d578fff1fc9"
  },
  "id": "ASn2qs8Z9Qm2RQwp",
  "tags": []
}
